#! NX/KF 5.0

DefClass: %com_ui_actions ();

#+
	Default Action UI Group.
	
	Add this to your DialogItems list as last element
	fill the parameters
		application_name			:	comes from nx_appilcation
		settings_file_name		: full_path_to_xml_file.xml
		version								: comes from aid_version.dfa mixin
		help_url							: url to application help
		ui_instances					: all ui_comp instances with primitive 'value' attribute
														overwrite this parameter if you want other ui's
		add callback					: add this as 'else' case to your Update:() Method
														    @{
      													   ActionUpdate:($instance);
    														};
														callbacks can be overwritten by adding, e.g. 
															...else if ($instance=InfoButton:)
															@{
																# new code
															}...
														this prevents the else case from evaluation
#-

######################################################################
#														PARAMETERS
######################################################################

(string Parameter) application_name: "Set App Name";

(String Parameter) settings_file_name: "c:\\mySettings.xml";

(String Parameter) version: "-1";

(String Parameter) help_url: "www.google.de";

(List) ui_instances_init: 
	{
		%ui_comp_double, 
		%ui_comp_enum, 
		%ui_comp_expression, 
		%ui_comp_integer, 
		%ui_comp_select_file, 
		%ui_comp_select_folder,
		%ui_comp_toggle,
		%ui_comp_types,
		%ui_comp_string
	};

# get some ui_comp_* childs to save its value 
(List Parameter) ui_instances:
@{
	loop {
		For $inst in children:;
		if member( ug_askInstanceClass( $inst ), ui_instances_init: ) Collect $inst;
	};
};

# get some ui_comp_point childs to save its value 
(List Parameter) ui_point_instances:
@{
	loop {
		For $inst in children:;
		if member( ug_askInstanceClass( $inst ), {%ui_comp_point} ) Collect $inst;
	};
};

# get some ui_comp_vector childs to save its value 
(List Parameter) ui_vector_instances:
@{
	loop {
		For $inst in children:;
		if member( ug_askInstanceClass( $inst ), {%ui_comp_vector} ) Collect $inst;
	};
};

(Boolean Parameter) use_update_toggle?: false;
#######################################################################
#														UI
#######################################################################

#-----------------------------------
# actions group
#-----------------------------------
# +
(Child) ActionGroup: {
  Class, %ui_comp_group;
  members, { UpdateButton:, HelpButton:, SaveUISettingsButton:, LoadUISettingsButton: , InfoButton: };
	Title, "Actions";
  column, 5;
	expanded, false;
  Group, true;
};

      # update button
      (Child) UpdateButton: {
        Class, if use_update_toggle?: then %ui_comp_toggle else %ui_comp_button;
        title, ""; 
        Cue, "";
        ToolTipTitle, True;
        Tooltip, "Update Display";
        icon, if getEnv("UGII_VERSION") = "v6" then "updatemodel" else "updatemodel_sm";
      };
		
			# help button
      (Child) HelpButton: {
        Class, %ui_comp_button;
        title, "";
        label, "Help";
        ToolTipTitle, True;
        Tooltip, "Open help for " + application_name:;
        icon, "help_sm";
      };
		
			# save settings button
      (Child) SaveUISettingsButton: {
        Class, %ui_comp_button;
        title, "";
        label, "Help";
        ToolTipTitle, True;
        Tooltip, "Save Settings";
        icon, "filesave_sm";
      };
		
			# load settings button
      (Child) LoadUISettingsButton: {
        Class, %ui_comp_button;
        title, "";
        label, "Load Settings";
        ToolTipTitle, True;
        Tooltip, "Load Settings";
        icon, "fileopen_sm";
      };
		
			# load settings button
      (Child) InfoButton: {
        Class, %ui_comp_button;
        title, "";
        label, "Information";
        ToolTipTitle, True;
        Tooltip, "Information";
        icon, "information_sm";
      };

# Update Mechanism for UI blocks (Action Listeners)
(Method integer ) ActionUpdate:(Instance $instance)
@{
	if ($instance = UpdateButton: ) then
		@{
			if use_update_toggle?: then
				if (UpdateButton:value:) then ug_updateKFObjects({}) else 0
			else ug_updateKFObjects({});
			0;
		}
	else  if ($instance = HelpButton: ) then
		@{
			ug_invokeBrowser( help_url: );
			0;
		}
	else  if ($instance = SaveUISettingsButton: ) then
		@{
			$xml_file << getEnv("KITE_PSM") + "\" + settings_file_name:;
			$xml_data << do_save_ui_settings:();
			xmlWrite( $xml_file,$xml_data );
			0;
		}
	else  if ($instance = LoadUISettingsButton: ) then
		@{
			
			do_load_ui_settings:();
			0;
		}
	else  if ($instance = InfoButton: ) then
		@{
			do_info:();
			0;
		}
	else 
	 0;
	
	# add the next lines to your own update method!
	# continous update
	# if (UpdateButton:value:) then ug_updateKFObjects({}) else 0;
	
	0;
};

##########################################################
# Methods
##########################################################

(Method Integer) do_load_ui_settings:()
@{
			$xml_file << getEnv("KITE_PSM") + "\" + settings_file_name:;
			writeStatus("Loading Settings from " + $xml_file + "...");
			
			# get ui_comp's with value attrib
			$xml_data << loop {
					for $inst in ui_instances:;
					for $ref_chain is ref( $inst, "refChain:" );
					for $short_name_colons is first(com_regexp( $ref_chain, ":[^:]*:$" ));
					for $short_name is first(SplitString( $short_name_colons, ":" ));
					Collect $short_name;
				};
			$dat << xmlRead($xml_file, $xml_data );
				
			loop {
					for $inst in ui_instances:;
					for $ref_chain is ref( $inst, "refChain:" );
					for $short_name_colons is first(com_regexp( $ref_chain, ":[^:]*:$" ));
					for $short_name is first(SplitString( $short_name_colons, ":" ));
					do write_xml_to_ui:(com_askHashValue( $short_name , $dat ), $inst, value);
			};

			# get ui_comp's with point attrib
			$xml_data << loop {
					for $inst in ui_point_instances:;
					for $ref_chain is ref( $inst, "refChain:" );
					for $short_name_colons is first(com_regexp( $ref_chain, ":[^:]*:$" ));
					for $short_name is first(SplitString( $short_name_colons, ":" ));
					Append { $short_name+"_x", $short_name+"_y", $short_name+"_z" };
				};
			$dat << xmlRead($xml_file, $xml_data );
			
			loop {
					for $inst in ui_point_instances:;
					for $ref_chain is ref( $inst, "refChain:" );
					for $short_name_colons is first(com_regexp( $ref_chain, ":[^:]*:$" ));
					for $short_name is first(SplitString( $short_name_colons, ":" ));
					for $x is com_askHashValue( $short_name + "_x" , $dat );
					for $y is com_askHashValue( $short_name + "_y" , $dat );
					for $z is com_askHashValue( $short_name + "_z" , $dat );
					do write_xml_point_to_ui:($x, $y, $z, $inst, point );
				};
					
			# update UI
			loop {
					for $inst in ui_instances:;
					do update_ui:($inst);
			};
			loop {
					for $inst in ui_point_instances:;
					do update_ui:($inst);
			};
			
			writeStatus("Loading Settings from " + $xml_file + "...done.");
			0;
};

(Method List) do_save_ui_settings:()
@{
			$xml_file << getEnv("KITE_PSM") + "\" + settings_file_name:;
			writeStatus("Saving Settings to " + $xml_file + "...");
			
			$xml_data << loop {
					for $inst in ui_instances:;
					for $ref_chain is ref( $inst, "refChain:" );
					for $short_name_colons is first(com_regexp( $ref_chain, ":[^:]*:$" ));
					for $short_name is first(SplitString( $short_name_colons, ":" ));
					Collect {$short_name, ref($inst, "value:")};
				} + loop {
					for $inst in ui_point_instances:;
					for $ref_chain is ref( $inst, "refChain:" );
					for $short_name_colons is first(com_regexp( $ref_chain, ":[^:]*:$" ));
					for $short_name is first(SplitString( $short_name_colons, ":" ));
					Append {{$short_name + "_x", LocalX(ref($inst, "point:"))},
									{$short_name + "_y", LocalY(ref($inst, "point:"))},
									{$short_name + "_z", LocalZ(ref($inst, "point:"))}
								};
				};
			
			#ug_printValues($xml_data);
			
			#xmlWrite( $xml_file,$xml_data );
			writeStatus("Saving Settings to " + $xml_file + "...done.");
			$xml_data;
};


(Method Integer) do_info:()
@{
			ug_printValues( {"============================================================"} );
			ug_printValues( {"Information listing created by : " + ug_askUserName(  ) } );
			ug_printValues( {"Date                           : " + dateTimeString( ),
											 "Current work part              : " + ug_askCurrentWorkPart(  ) } );
			ug_printValues( {"Siemens NX, version            : " + getEnv("UGII_FULL_VERSION") } );
			ug_printValues( {"============================================================"} );
			ug_printValues( {"\nApplication                    : " + application_name:} );
			ug_printValues( {"Kite, version                  : " + version:});
			ug_printValues( on_info:);
			ug_printValues( {"Temp directory                 : " + getEnv("KITE_PSM") } );
			ug_printValues( {"UI Settings File               : " + settings_file_name: } );
			ug_printValues( {"\n------------------------------------------------------------"} );
			ug_printValues( {"Parameters\n"} );
			
			loop {
					for $inst in ui_instances:;
					for $ref_chain is ref( $inst, "refChain:" );
					for $short_name_colons is first(com_regexp( $ref_chain, ":[^:]*:$" ));
					for $short_name is first(SplitString( $short_name_colons, ":" ));
					do ug_printValues( {format("\t%-28s : ", $short_name), ref($inst, "value:")} );
				};
			
			self_test:();
};

(Method Integer) write_xml_to_ui:(Any $value, Instance $inst, Any $attrib )
@{
	if ($value=NoValue) 
	then
		donothing
	else
		@{
			%ui_comp_setCacheValue(self(), $value , $inst , $attrib );
		};
	0;
};

# xml can only handle simple attributes, so compine each coord to a point if not NoValue
(Method Integer) write_xml_point_to_ui:(Any $x, Any $y, Any $z, Instance $inst, Any $attrib )
@{
	if ($x=NoValue | $y=NoValue | $z=NoValue) 
	then
		donothing
	else
		%ui_comp_setCacheValue(self(), Point($x, $y, $z) , $inst , $attrib );
	0;
};

# Update the UI after all values have been loaded
(Method Integer) update_ui:(Instance $inst )
@{
#  ug_printValues({$inst});
 	Update:($inst);
#  ug_printValues({"Update done"});
};

(List) on_info: {"",""};

# self test to be printed on info button 
(Method Boolean) self_test:()
@{
	ug_printValues( {"\n------------------------------------------------------------"} );
	ug_printValues({"Self test\n"});
	
	ug_printValues({"\n<<<Still not implemented>>>\n"});
	
	$dummy_test1_name << "Dummy Comparisson 1";
	$dummy_test1_fail_reason << "( The Reason is here! )";
	$dummy_test1 << test_report:($dummy_test1_name, false, $dummy_test1_fail_reason);
	
	$dummy_test2_name << "Dummy Comparisson 2";
	$dummy_test2_fail_reason << "( The Reason is here! )";
	$dummy_test2 << test_report:($dummy_test2_name, false, $dummy_test2_fail_reason);
								
	$dummy_test1 & $dummy_test2;
};

(Method Boolean) test_report:(String $test_name, Any $test_condition, String $test_fail_reason )
@{
		if ( $test_condition ) 
                  then 
                  @{
                    ug_printValues({format("\t%-28s : ", $test_name), "PASSED"});
                    true;
                  } 
                  else 
                  @{
										ug_printValues({format("\t%-28s : ", $test_name), "FAILED, ", "(" + $test_fail_reason + ")"});
                    false;	
                  };
};

