#! NX/KF 4.0

DefClass: com_func_list ();

defun: com_list_removeNthItem(
#+
DesignLogic=no
-------------------------------------------------------------------------------
Description:
#.
	Remove the nth item in a list
.#

-------------------------------------------------------------------------------
#-
List $lst, #.List.#
Integer $nth_item #.item position to remove.#
)
@{
	loop {
		for $item in $lst;
		for $counter from 1 to length($lst);
		if $counter != $nth_item Collect $item;
	};
} List;
#+
-------------------------------------------------------------------------------
Returns:
List - #.List with removed item.#
-------------------------------------------------------------------------------
#-

# #####################################################################################################

defun: com_list_replaceNthItem(
#+
DesignLogic=no
-------------------------------------------------------------------------------
Description:
#.
	Replace the nth item in a list by value
	if $nth_item = -1 then every item is overwritten
.#

-------------------------------------------------------------------------------
#-
List $lst, #.List.#
Integer $nth_item, #.item position to remove.#
Any $value	#.value to store at $nth_item position.#
)
@{
	loop {
		for $item in $lst;
		for $counter from 1 to length($lst);
		Collect if $nth_item = -1 | $counter = $nth_item then $value else $item;
	};
} List;
#+
-------------------------------------------------------------------------------
Returns:
List - #.List with removed item.#
-------------------------------------------------------------------------------
#-

# #####################################################################################################

defun: com_list_resize(
#+
DesignLogic=no
-------------------------------------------------------------------------------
Description:
#.
	Resize a List to a new specified length
	if the list is larger than before, its filled up with the default value
	
	it is also possible to create a new list with default values, 
	e.g. com_list_resize({}, 20, {2,3,4});
.#

-------------------------------------------------------------------------------
#-
List $lst, #.List.#
Integer $new_size, #.new length size for list .#
Any $default_value #.default value to fill larger list elements.#
)
@{
	$old_size << length($lst);
  
  $new_pitches << subList($lst, 1, $new_size ) + loop{
          for $counter from $old_size + 1 to $new_size By 1;
          Collect $default_value;
   };
} List;
#+
-------------------------------------------------------------------------------
Returns:
List - #.List with removed item.#
-------------------------------------------------------------------------------
#-

# #####################################################################################################

defun: com_list_get_all_nth_items_in_sublists(
#+
DesignLogic=no
-------------------------------------------------------------------------------
Description:
#.
	collect all nth items in sublists
.#

-------------------------------------------------------------------------------
#-
List $lst, #.List.#
Integer $nth_id #.nth item id.#
)
@{
	loop {
		for $sub_list in $lst;
		collect nth($nth_id, $sub_list);
	};
} List;
#+
-------------------------------------------------------------------------------
Returns:
List - #.List with removed item.#
-------------------------------------------------------------------------------
#-

# #####################################################################################################

defun: com_list_1D_convolution(
#+
DesignLogic=no
-------------------------------------------------------------------------------
Description:
#.
	filter the numbers of a list
	by a convolution vector
	
	the end values are duplicated to convolute the ends of the input list
.#

-------------------------------------------------------------------------------
#-
List $lst, #.List of numbers.#
list $convolution_vector, #.convolution vector.#
Integer ($n_times, 1), #.do the convolution n times.#
Boolean ($normalize?, true) #.normalize convolution vector.#
)
@{
	$extened_lst << loop{
                   for $i from 1 to floor(length($convolution_vector)/2);
                   collect first($lst);
                  	} + $lst + loop{
                   for $i from 1 to floor(length($convolution_vector)/2);
                   collect last($lst);
                  }; 

	$convolution_sum << Loop {
                            For $a In $convolution_vector;
                            Sum $a;
                           };

	$convolution_vector_normalized << 	loop{
                                       for $i in $convolution_vector;
                                       collect if !$normalize? then 1 else $i / $convolution_sum;
                                      };
	
	$result << loop {
    for $i from 0 to length($lst) -1;
    collect loop{
                  for $oc from 1 to length($convolution_vector_normalized);
                  for $id is $i + $oc;
                  for $o in $convolution_vector_normalized;
                  sum $o*nth($id, $extened_lst) ;
                };
  };

  if $n_times > 1 then com_list_1D_convolution( $result, $convolution_vector, "n_times", $n_times - 1, "normalize?", $normalize?) else $result;
} List;

# #####################################################################################################

