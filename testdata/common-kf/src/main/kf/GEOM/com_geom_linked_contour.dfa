#! NX/KF 5.0
#! Version 1.0

DefClass: com_geom_linked_contour ( ug_base_part %ug_tolerances );
	
################################################################
# INPUT PARAMETERS
################################################################

(String Modifiable Parameter Canonical) cdf_file_name: 			"";  
(String Modifiable Parameter Canonical) file_rev: 					"";
(Integer Modifiable Parameter) 					hidden_layer: 			240;
(String Modifiable Parameter) 					feature_set_name: 	"";

# used to prevent the layer manager from executing twice
(Boolean Modifiable)										layer_manager_intialized?: false;


(Boolean) 															deleteTopInstance?:	true; # still needed??

# will automagically use mirrored segments also (e.g. if 1 is included, all 11-ish segments will also be included)
# default: include all
# see max_set_of_included_contours:
(List Modifiable Parameter)						 included_contours: {1}; 

# the largest set of allowed values that included_contours: may contain.
(List )																 max_set_of_included_contours: {1,  2, 4, 5, 7, 8};

# distance_tolerance: gets mixed in from %ug_tolerances
# is usually set to 0.0254


################################################################
# GEOMETRY
################################################################

(Boolean Modifiable) partLoaded: 			false;

(Child) partFile:
{
    Class,          if cdf_file_name: = "" then nulldesign else ug_partFile;
    Part_Name,      cdf_file_name:;
		ItemRevision,		file_rev:;
};


# create a component of the selected CDF
(Child) CDFComponent:
{
    Class,          		if cdf_file_name: = "" then nulldesign else ug_component;
    File_Name,      		if (partLoaded:)
                        then partFile:ask_part_file_spec:()
                        else @{
                            partFile:open:();
                            storeValue(true, self:, partLoaded);
                            partFile:ask_part_file_spec:();
                        };
		Component_Name, 	  "CDF";
    Color,           		-1;
    Layer,          		hidden_layer:;
		Reference_Set_Name, "Entired Part";
		DemandOrder,    		{partFile:};
		lockObject?, 				true;
		givenName,					"CDFComp";
		DemandOrder,    		{partFile:};
};



(Child) Cont1:   
{
          class, 											if ( member(1, included_contours:)  ) then nx_composite_curve else nulldesign;
          Parent_Part, 								other_part;
          Section_Chaining_Tolerance, distance_tolerance:;
          Section_Distance_Tolerance, 0.02413;
          Section_Angle_Tolerance, 		0.5;
          Section_Rules, 							{{Single_Curves} + first( contour_hostpointers: )};
          Section_Tolerances, 				{0.02413, distance_tolerance:, 0.5};
          Associative, 								true;
          Hide_Original, 							false;
          Allow_Self_Intersection, 		false;
          Fix_At_Current_Timestamp, 	true;
          Make_Position_Independent, 	true;
          lockObject?, 								true;
          demandOrder,                {CDFComponent:};		
};


# +
(Child) Cont2: 
{
          class, 											if ( member(2, included_contours:)  )then nx_composite_curve else nulldesign;
          Parent_Part, 								other_part;
          Section_Chaining_Tolerance, distance_tolerance:;
          Section_Distance_Tolerance, 0.02413;
          Section_Angle_Tolerance, 		0.5;
          Section_Rules, 							{Single_Curves} + second( contour_hostpointers: );
          Section_Tolerances, 				{0.02413, distance_tolerance:, 0.5};
          Associative, 								true;
          Hide_Original, 							false;
          Allow_Self_Intersection, 		false;
          Fix_At_Current_Timestamp, 	true;
          Make_Position_Independent, 	true;
          lockObject?, 								true;
          demandOrder,                {CDFComponent:};
};


(Child) Cont4: 
{
          class, 											if ( member(4, included_contours:)  )then nx_composite_curve else nulldesign;
          Parent_Part, 								other_part;
          Section_Chaining_Tolerance, distance_tolerance:;
          Section_Distance_Tolerance, 0.02413;
          Section_Angle_Tolerance, 		0.5;
          Section_Rules, 							{Single_Curves} + third( contour_hostpointers: );
          Section_Tolerances, 				{0.02413, distance_tolerance:, 0.5};
          Associative, 								true;
          Hide_Original, 							false;
          Allow_Self_Intersection, 		false;
          Fix_At_Current_Timestamp, 	true;
          Make_Position_Independent, 	true;
          lockObject?, 								true;
          demandOrder,                {CDFComponent:};
};	


(Child) Cont5: 
{
          class, 											if ( member(5, included_contours:) )then nx_composite_curve else nulldesign;
					Parent_Part, 								other_part;
          Section_Chaining_Tolerance, distance_tolerance:;
          Section_Distance_Tolerance, 0.02413;
          Section_Angle_Tolerance, 		0.5;
          Section_Rules, 							{Single_Curves} + nth(4, contour_hostpointers: );
          Section_Tolerances, 				{0.02413, distance_tolerance:, 0.5};
          Associative, 								true;
          Hide_Original, 							false;
          Allow_Self_Intersection, 		false;
          Fix_At_Current_Timestamp, 	true;
          Make_Position_Independent, 	true;
          lockObject?, 								true;
          demandOrder,                {CDFComponent:};
};	





(Child) Cont7: 
{
          class, 											if ( member(7, included_contours:) )then nx_composite_curve else nulldesign;
          Parent_Part, 								other_part;
          Section_Chaining_Tolerance, distance_tolerance:;
          Section_Distance_Tolerance, 0.02413;
          Section_Angle_Tolerance, 		0.5;
          Section_Rules, 							{Single_Curves} + nth( 5, contour_hostpointers: );
          Section_Tolerances, 				{0.02413, distance_tolerance:, 0.5};
          Associative, 								true;
          Hide_Original, 							false;
          Allow_Self_Intersection, 		false;
          Fix_At_Current_Timestamp, 	true;
          Make_Position_Independent, 	true;
          lockObject?, 								true;
          demandOrder,                {CDFComponent:};
};


(Child) Cont8: 
{
          class, 											if ( member(8, included_contours:) )then nx_composite_curve else nulldesign;
          Parent_Part, 								other_part;
          Section_Chaining_Tolerance, distance_tolerance:;
          Section_Distance_Tolerance, 0.02413;
          Section_Angle_Tolerance, 		0.5;
          Section_Rules, 							{Single_Curves} + nth( 6, contour_hostpointers: );
          Section_Tolerances, 				{0.02413, distance_tolerance:, 0.5};
          Associative, 								true;
          Hide_Original, 							false;
          Allow_Self_Intersection, 		false;
          Fix_At_Current_Timestamp, 	true;
          Make_Position_Independent, 	true;
          lockObject?, 								true;
          demandOrder,                {CDFComponent:};
};


(Child) JoinedContour: {
  Class, if Empty?(segments:) then nulldesign else ug_curve_join;
#	class, ug_curve_join;
  profile, ug_container_askFeatureCurves( segments:);
  Join_Method, SPLINE;
  Join_Tolerance, distance_tolerance:;
  Suppress_Children?, FALSE;
	demandValue,{ ug_container_askFeatureCurves( segments:) };
	demandOrder, {Cont1:,Cont2:, Cont4:, Cont5:, Cont7:, Cont8: };
#	lockObject?, true;
};


(Child) LayerManager: {
  Class, nx_layer_manager;
};

# sets all geometry of this class to hidden_layer:
# so the contour doesn't show up
(Any) set_object_layers:@{
	loop{
		for $curve in ug_container_askFeatureCurves(features:);
		do ug_setObjectLayer( $curve, hidden_layer: );
	};
	# avoid overriding user settings when re-evaluating e.g. after 
	# contour swapping
	if( ! layer_manager_intialized?:) then @{
		nx_ja_layer_set_state( LayerManager:, hidden_layer:, hidden, false);	
		StoreValue(true, self(), layer_manager_intialized?);
	} else 0;
};

(Child) FeatureSet: {
  Class, ug_feature_set;
  Features, features:;
  Feature_Set_Name, feature_set_name:;
  Hide_Members?, True;
  icon_name, "prod_def_editor";
	demandValue, { set_object_layers: };
};
				
#-

###############################################################################
#					Methods
###############################################################################
(Method List) ask_contour_hostpointers:(String $file)
@{
		if $file != "" then @{
        #$load_status << com_comp_askComponentLoadStatus(CDFComponent:);
        #$hosts << if $load_status < 1 then {{},{},{},{}}
        #else							
				
				# grab segments first
				$cont1_segments << if member(1, included_contours: ) then 
          loop{
            For $count from 1 to 99;
            Append	ug_refObjectByName( "CDF_CTR_1_SEG_" + stringValue($count) , {ug_arc, ug_line}, $file );
          } + loop{
            For $count from 1 to 99;
            Append	ug_refObjectByName( "CDF_CTR_11_SEG_" + stringValue($count) , {ug_arc, ug_line}, $file );
          } else {};
				$cont2_segments << if member(2, included_contours: ) then 
					loop{
            For $count from 1 to 99;
            Append	ug_refObjectByName( "CDF_CTR_2_SEG_" + stringValue($count) , {ug_arc, ug_line}, $file );
          } + loop{
            For $count from 1 to 99;
            Append	ug_refObjectByName( "CDF_CTR_12_SEG_" + stringValue($count) , {ug_arc, ug_line}, $file );
          } else {};
				$cont4_segments << if member(4, included_contours: ) then 
					loop{
            For $count from 1 to 99;
            Append	ug_refObjectByName( "CDF_CTR_4_SEG_" + stringValue($count) , {ug_arc, ug_line}, $file );
          } + loop{
            For $count from 1 to 99;
            Append	ug_refObjectByName( "CDF_CTR_14_SEG_" + stringValue($count) , {ug_arc, ug_line}, $file );
          } else {};
				$cont5_segments << if member(5, included_contours: ) then 
					loop{
            For $count from 1 to 99;
            Append	ug_refObjectByName( "CDF_CTR_5_SEG_" + stringValue($count) , {ug_arc, ug_line}, $file );
          } + loop{
            For $count from 1 to 99;
            Append	ug_refObjectByName( "CDF_CTR_15_SEG_" + stringValue($count) , {ug_arc, ug_line}, $file );
          } else {};
				$cont7_segments << if member(7, included_contours: ) then 
					loop{
            For $count from 1 to 99;
            Append	ug_refObjectByName( "CDF_CTR_7_SEG_" + stringValue($count) , {ug_arc, ug_line}, $file );
          } + loop{
            For $count from 1 to 99;
            Append	ug_refObjectByName( "CDF_CTR_17_SEG_" + stringValue($count) , {ug_arc, ug_line}, $file );
          } else {};
				$cont8_segments << if member(8, included_contours: ) then 
					loop{
            For $count from 1 to 99;
            Append	ug_refObjectByName( "CDF_CTR_8_SEG_" + stringValue($count) , {ug_arc, ug_line}, $file );
          } + loop{
            For $count from 1 to 99;
            Append	ug_refObjectByName( "CDF_CTR_18_SEG_" + stringValue($count) , {ug_arc, ug_line}, $file );
          } else {};					
				
				# now put it all together into one list
        $hostpointers << {$cont1_segments, $cont2_segments, $cont4_segments, $cont5_segments, $cont7_segments, $cont8_segments };
				
				# check for missing host pointers
				loop{
					for $segment_index from 1 to length(max_set_of_included_contours:);
					do @{
						$contour_id << nth($segment_index, max_set_of_included_contours:);
						$this_segment_switched_on? << member($contour_id, included_contours:);
						$hostpointers_empty? << Empty?(nth($segment_index, $hostpointers));
						if($this_segment_switched_on? & $hostpointers_empty? ) then @{
							$title << "CDF contains errors";
							$message <<"segment " + StringValue($contour_id) + " is missing.";
							ug_printMessage( {$title, $message} );
							ug_error($title, $message);
						} else 0;
					};
				};
				# nothing missing, return the list
				$hostpointers;
		} else {
			{{},{}, {}, {}, {}, {}};
		};
};

(Any Method) initialize:(String $file, String ($file_rev, "A"))
@{
	$hosts << ask_contour_hostpointers:($file);
	StoreValue($hosts, self:, contour_hostpointers);
	$hosts;
};

(Any Method) relink:(String $file, String ($file_rev, "A"))
@{
	$comp_change_status << com_comp_changeComponentSource( CDFComponent: , $file , "rev", file_rev: );
	if $comp_change_status = 0 then 
	@{
		$hosts << ask_contour_hostpointers:($file);
		#StoreValue($hosts, self:, contour_hostpointers);
		
		if ! isKindOf?( Cont1:, nulldesign) then
			com_wave_changeCompositeCurveLinkSource( Cont1:, nth(1, $hosts ) )
		else 0;
		
		if! isKindOf?( Cont2:, nulldesign) then
			com_wave_changeCompositeCurveLinkSource( Cont2:, nth(2, $hosts ) )
		else 0;
		
		if ! isKindOf?( Cont4: , nulldesign) then
			com_wave_changeCompositeCurveLinkSource( Cont4:, nth(3, $hosts ) )
		else 0;
		
		if ! isKindOf?( Cont5: , nulldesign) then
			com_wave_changeCompositeCurveLinkSource( Cont5:, nth(4, $hosts ) )
		else 0;
		
		if ! isKindOf?( Cont7:, nulldesign) then
			com_wave_changeCompositeCurveLinkSource( Cont7:, nth(5, $hosts ) )
		else 0;
		
		if ! isKindOf?( Cont8:, nulldesign) then
			com_wave_changeCompositeCurveLinkSource( Cont8:, nth(6, $hosts ) )
		else 0;
	}
	else -2;
};

(List) segments:
@{
	# only collect 1,4 and 8, since these are the only joinable curves (the others may produce gaps)
	# check individual childs for nulldesign, if they ain't, put 'em in a list
	
	$cont1 << if isKindOf?(Cont1:, nulldesign ) then {} else {Cont1: };	
	$cont4 << if isKindOf?(Cont4:, nulldesign ) then {} else {Cont4: };
 	$cont8 << if isKindOf?(Cont8:, nulldesign ) then {} else {Cont8: };
	# concat all lists into one
	$cont1 + $cont4 + $cont8;
};

(List) features:
@{
	$cont2 << if isKindOf?(Cont2:, nulldesign ) then {} else {Cont2: };
	$cont5 << if isKindOf?(Cont5:, nulldesign ) then {} else {Cont5: };
	$cont7 << if isKindOf?(Cont7:, nulldesign ) then {} else {Cont7: };
	$joined << if isKindOf?(JoinedContour: , nulldesign ) then {} else { JoinedContour: };
	segments: + $cont2 + $cont5 + $cont7 + $joined;
};

(List) contour_hostpointers: 
@{
	$filename << if (partLoaded:)
  then partFile:ask_part_file_spec:()
  else @{
      partFile:open:();
      storeValue(true, self:, partLoaded);
      partFile:ask_part_file_spec:();
   };	
	$pointers_in_other_file << ask_contour_hostpointers:($filename);	
};

