#
# This is just a collection of code snippets that came in handy at
# some point.

#+
## constraint list for swd_layout et. al. ##
@{ $the_list << {		{"start_point", point(0,0,0)}, 
		{"arc_center", point(0,0,0) },   
		{"angular_offset", 0},
		{"rotation_angle", 0},
		{"spacing_factor", 1.0},
    {"font_size", 100},
		{"circle_radius", 1000},
    {"spacing_table_index", 1},
    {"layout_strategy",  StraightLine},
		{"anchor_method",  "bottom left"},
		{"line_spacing_factor", 1.0},
		{"font", "D:\Projects\sw\ug_customization\kite\SWD\parts\sample_font_100.prt"},
		{"text", "AABA"} };

};


#
swd_layout("D:\Projects\sw\ug_customization\kite\SWD\parts\sample_font_100.prt","AABA", point(0,0,0),point(0,0,0),0,0, 1.0, 100, 500, 1, StraightLine, "bottom left", 1.0);



#-

# swd_layout("D:\Projects\sw\ug_customization\kite\SWD\parts\sample_font_100.prt","AABA", point(0,0,0),point(0,0,0),0,0, 1.0, 100, 500, 1, Circle, "bottom left", 1.0, true);



#+ 
for $vertical_anchor_vec is if swd_isAnchorBottom($original_constraints) then  $rot_vec_vertical * ($nbr_of_lines -1) * ($font_size + $line_spacing) else 
											if swd_isAnchorMiddle($original_constraints) then  $rot_vec_vertical * (($nbr_of_lines * $font_size + ($nbr_of_lines - 1) * $line_spacing )/2 -$font_size)  else
											if swd_isAnchorTop($original_constraints) then $rot_vec_vertical * (- $font_size) else @{
													$anchor_method << com_askHashValue("anchor_method", $original_constraints);
													debug_printValues({"unknown anchor method:", $anchor_method});
													Vector(0,0,0);
											};

		for $horizontal_anchor_vec is  if swd_isAnchorLeft($original_constraints) then Vector(0,0,0) else 
											if swd_isAnchorCenter($original_constraints) then  $rot_vec_horizontal * -0.5 * $width else
											if swd_isAnchorRight($original_constraints) then $rot_vec_horizontal * - $width else @{
													$anchor_method << com_askHashValue("anchor_method", $original_constraints);
													debug_printValues({"unknown anchor method:", $original_constraints});
													Vector(0,0,0);
#-


@{
 $constraints << {{"start_point",point(0, 0, 0)},
				  {"arc_center",point(0, 0, 0)},
				  {"angular_offset",0},
				  {"rotation_angle",0},
				  {"spacing_factor",1},
				  {"font_size",40},
				  {"circle_radius",245},
				  {"spacing_table_index",1},
				  {"layout_strategy",circle},
				  {"anchor_method","Middle Right"},
				  {"line_spacing_factor",1},
				  {"font","D:\Projects\sw\ug_customization\kite\SWD\released_fonts\arial_monospace.prt"},
				  {"text","AA"};
				  	{"upside_down?", false },
				{"bow_expand?", false },
        {"pointing_angle", 0 },
				{"shearing_angle", 0},
				{"angle_range", 0 },					
				{"extent", 0 },
				{"size_constraint", "font size" },
				};     
			swd_layout($constraints);
 };

 
 @{
			$tang_angle << 45;
			$p << Point(0,0,1);
			$x << localx($p);
			$y << localy($p);
			$z << localz($p);
			$np << point(
                $x * sin( $tang_angle) - $z * cos($tang_Angle) ,
                $y ,                  
				$z * sin($tang_angle) + $x* cos($tang_angle) 
               );
			debug_vispoint($p, 1,208);
			debug_vispoint($np, 1,216);
};			
			   
			   
@{ 
	$p << Point(0,100,0);
	
	$tilt_axis_angle << 45;
	$x << localx($p);
	$y << LocalY($p); # move left to center
	$z << LocalZ($p); # move down to center
	$np << Point(
	 $x,
	 $y *cos(- $tilt_axis_angle) - $Z * sin( - $tilt_axis_angle),                  
	 $y *sin(- $tilt_axis_angle) + $z * cos(- $tilt_axis_angle) 
	);
	debug_vispoint($p, 1,208);
	debug_vispoint($np, 1,216);
};


@{
	$start_point_y << 0;
	$start_point_z << 0;
	$distances << {5,25,45};
	$rot_angle << 0;
	$middle_line_offset << 5;	
	loop{
	for $distance in $distances;
 	for $y is $distance *cos($rot_angle) + $start_point_y;
	for $z is ($distance ) *sin($rot_angle) + $start_point_z + $middle_line_offset;
	collect {"radius", sqrt($z^2 + $y ^2), "y",$y, "z", $z};
	};
}

@{
	$start_point_y << 10;
	$start_point_z << 10;
	$distances << {5,25,45};
	$rot_angle << 0;
	$middle_line_offset << 5;
	$org_z << $middle_line_offset;
	loop{
	for $distance in $distances;
	for $org_y is $distance;
 	for $y is $org_y *cos($rot_angle) - $org_z * sin($rot_angle) + $start_point_y;  
	for $z is $org_y *sin($rot_angle) + $org_z * cos($rot_angle) + $start_point_z;
	collect {"radius", sqrt($z^2 + $y ^2), "y",$y, "z", $z};
	};
}

@{
	$angles << { 0,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,255,270,285,300,315,330,345,360};
	$p << Point(0,0,100);
	debug_visPoint($p, 1,216);
	loop{
		for $tilt_axis_angle in $angles;		
		for $x is localx($p);
		for $y is LocalY($p); # move left to center
		for $z is LocalZ($p); # move down to center
		for $new_p is Point(
			$x,
  		    $y *cos( $tilt_axis_angle) - $z * sin(  $tilt_axis_angle),                  
			$y *sin( $tilt_axis_angle) + $z * cos( $tilt_axis_angle)
		);
		do debug_visPoint($new_p, 1,208);
	};
};

loop{ 
	for $plist in nth(1,nth(2,nth(2,nth(1,swd_text5:layout:))));
	do loop {
		for $p in  $plist;
		do vis_point($p, 1, 186);
	};
}

@{
	$vals << {"a", "b", "c", "d", "e", "f"};
	$sheet_id << 1;
	$row_start << 1;
	$row_end << 2;
	$col_start << 1;
	$col_end << 3;
	$header << {$sheet_id, $row_start, $col_start, $row_end, $col_end};
	$data << $header + $vals;
	$excelfile << "C:\Documents and Settings\ux00850\Desktop\bla.xls";
	$port << ug_excel_open_file($excelfile, Write);
	if($port != 0) then @{
		ug_excel_write_range($port, $data);
		$do_save << true;
		$close_successful << ug_excel_close_file($port, $do_save);
		debug_printValues({"end writeSpacingTableToExcel, closed success? ",$close_successful});
		$close_successful;
	} else @{
		ug_printValues({"cannot open file: ", $excelfile});
	};
}