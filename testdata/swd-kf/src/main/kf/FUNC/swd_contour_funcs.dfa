#! NX/KF 4.0

DefClass: swd_contour_funcs ();


defun: swd_askPointOnContour(Number $radius,  Boolean($use_bottom_half, false))
@{
	$joined_contour_Curve << swd_getJoinedContourCurve(); 
	$param << swd_askParamForRadiusOnContour($radius, "use_bottom_half", $use_bottom_half);
	if($param == NoValue) then Point(0,0,0) #default ~ origin
	else	ug_curve_askPointOnCurve( $joined_contour_Curve,$param);	
} Point;

defun: swd_askParamForRadiusOnContour(Number $radius, Boolean($use_bottom_half, false))
@{	
	$joined_contour_Curve << swd_getJoinedContourCurve();
	$curve_param_list << ug_curve_askPlaneIntersection($joined_contour_Curve, point(  0, $radius,  0), Vector(0,1,0), first(ug_askModelTolerances()));
	# sanity checks
	if(empty?($curve_param_list)) then @{
	  $title << "swd_askParamForRadiusOnContour: radius outside";  
		$message << " no intersection found.";
		ug_printValues( {$title, $message});
		NoValue;
	} else if(length(first($curve_param_list)) = 2) then @{
	  $title << "Sanity check failed";
    $message << " NX claims the contour and sidewall are on the same plane. This is likely a bug.";
		ug_printValues( {$title, $message});
		NoValue;
	} else 0;
 	# we now should have a list of lists of numbers
	# there may be two lists if we have an asymmetrical contour
	# first get a list of simple params
	$params << flatten($curve_param_list);
	# if we have a asymmetrical contour, we'll ahve two intersections, which translates to two 
	# params
	# if we are looking at the bottom half, we should get a negative x value for the intersecting points and a positive one
	# for top half
	first(
    loop {
      for $param in $params;
      for $intersection_point is ug_curve_askPointOnCurve( $joined_contour_Curve,$param);	
      for $point_is_on_top 		is LocalX($intersection_point) > 0;
      for $point_is_on_bottom	is LocalX($intersection_point) < 0;
      for $do_collect 				is ($use_bottom_half & $point_is_on_bottom) | ( (!$use_bottom_half) & $point_is_on_top);
      if $do_collect collect $param;
    }
	);
	
} Any;

defun: swd_getContourInstance()
@{
	$contour_list << com_askInstanceByClassName( "swd_contour" );
	# sanity check
	if(Length($contour_list) = 1) then  0 else @{
    $title << "Error: No CDF ";
    $message << "no contour or more than one contour found";
    ug_printMessage({$title, $message});
    ug_error($title, $message);
	};	
	$contour_instance << first($contour_list);
} Instance;

defun: swd_ContourFileUsed?()
@{
	$contour_list << com_askInstanceByClassName( "swd_contour" );
	$got_contour_class? << length($contour_list ) = 1;	
	$uses_cdf? << if($got_contour_class? ) then @{
			$contour_instance << swd_getContourInstance();		
			ref($contour_instance, "SWDGeomContour:use_contour:" );
	} else false;
	$got_contour_class? & $uses_cdf?;
}Boolean;

defun: swd_getJoinedContourCurve()
@{		
	# class is there, but radii may have been entered by hand.
	if( swd_ContourFileUsed?() ) then 0 else @{
	  $title << "Error: No CDF";
    $message << "DS1 and DS2 have been entered manually.";
    ug_printMessage({$title, $message});
    ug_error($title, $message);
	};
	$contour_instance << swd_getContourInstance();
	$joined_contour_Curve << ref($contour_instance, "SWDGeomContour:Contour:JoinedContour:Output_Curve_0:");
}Instance;

defun: swd_askTangentOnContour(Number $radius,  Boolean($use_bottom_half, false))
@{
	$param <<  swd_askParamForRadiusOnContour($radius, "use_bottom_half", $use_bottom_half);
	if($param == NoValue) then
	@{
		Vector(0,1,0); #default ~ no angle
	}
	else	@{
    $curve << swd_getJoinedContourCurve();	
    $tangent_vector << ug_curve_askTangent( $curve, $param );
    $points_to_center << Localy($tangent_vector) < 0;
    $flipped_tangent_vector << if $points_to_center then - $tangent_vector else $tangent_vector;
    $flipped_tangent_vector;
	};
} Vector;


defun: swd_askTangentOnContourAngle(Number $radius, Boolean($use_bottom_half, false))
@{
	if(swd_ContourFileUsed?() ) then @{
    $base_vector << vector(0,1,0);
    $tangent_vector << swd_askTangentOnContour($radius, "use_bottom_half", $use_bottom_half);
    $view_vector << vector(0,0,-1); # contour is on XY plane, so we look at it in a z direction.        
		Angle2Vectors($base_vector, $tangent_vector, $view_vector);
		} 
	else 0;
}Number;

defun: swd_tiltOnContour?()
@{
	if swd_ContourFileUsed?() then @{
		ref(swd_getContourInstance(), "tilt_text?:" );
	} else false;
}boolean;

defun: swd_XOffset(Number $radius, Boolean($use_bottom_half, false))
@{
	if(swd_tiltOnContour?()) then @{
  	localx(swd_askPointOnContour($radius, "use_bottom_half", $use_bottom_half));
	} else 0;
} Number;

